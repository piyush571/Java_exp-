//PART:-A : SUM OF INTEGERS USING AUTOBOXING AND UNBOXING.

import java.util.ArrayList;

public class expA {
    public static void main(String[] args) {
        ArrayList<Integer> numbers = new ArrayList<>();
        numbers.add(40);
        numbers.add(60);
        numbers.add(90);
        int sum = 0;
        for(Integer num : numbers) {
            sum += num;
        }
        System.out.println("Sum: " + sum);
    }
}


//PART:-B : SERIALIZATION AND DESERIALIZATION OF A STUDENT OBJECT.


import java.io.*;

class Student implements Serializable {
    private String name;
    private int id;

    public Student(String name, int id) {
        this.name = name;
        this.id = id;
    }

    public String toString() {
        return "Student{name='" + name + "', id=" + id + "}";
    }
}

public class StudentSerialization {
    public static void main(String[] args) {
        Student s = new Student("John Doe", 101);
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("student.ser"))) {
            oos.writeObject(s);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("student.ser"))) {
            Student s1 = (Student) ois.readObject();
            System.out.println(s1);
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}



//PART:-C : MENU BASEDE EMPLOYEE MANAGEMENT SYSTEM USING FILE HANDLING

import java.io.*;
import java.util.*;

class Employee implements Serializable {
    private int id;
    private String name;
    private double salary;

    public Employee(int id, String name, double salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    public int getId() {
        return id;
    }

    public String toString() {
        return "Employee{id=" + id + ", name='" + name + "', salary=" + salary + "}";
    }
}

public class EmployeeManagement {
    static Scanner sc = new Scanner(System.in);
    static final String FILE_NAME = "employees.dat";

    public static void main(String[] args) {
        while(true) {
            System.out.println("1. Add Employee");
            System.out.println("2. Display Employees");
            System.out.println("3. Search Employee by ID");
            System.out.println("4. Exit");
            System.out.print("Enter choice: ");
            int choice = sc.nextInt();
            switch(choice) {
                case 1:
                    addEmployee();
                    break;
                case 2:
                    displayEmployees();
                    break;
                case 3:
                    searchEmployee();
                    break;
                case 4:
                    System.exit(0);
            }
        }
    }

    static void addEmployee() {
        System.out.print("Enter ID: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Salary: ");
        double salary = sc.nextDouble();
        Employee emp = new Employee(id, name, salary);
        List<Employee> employees = readEmployees();
        employees.add(emp);
        writeEmployees(employees);
        System.out.println("Employee added");
    }

    static void displayEmployees() {
        List<Employee> employees = readEmployees();
        if(employees.isEmpty()) {
            System.out.println("No employees found");
            return;
        }
        for(Employee e : employees) {
            System.out.println(e);
        }
    }

    static void searchEmployee() {
        System.out.print("Enter ID to search: ");
        int id = sc.nextInt();
        List<Employee> employees = readEmployees();
        for(Employee e : employees) {
            if(e.getId() == id) {
                System.out.println(e);
                return;
            }
        }
        System.out.println("Employee not found");
    }

    static List<Employee> readEmployees() {
        List<Employee> employees = new ArrayList<>();
        try(ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            employees = (List<Employee>) ois.readObject();
        } catch(Exception e) {}
        return employees;
    }

    static void writeEmployees(List<Employee> employees) {
        try(ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            oos.writeObject(employees);
        } catch(IOException e) {
            e.printStackTrace();
        }
    }
}
